#!/usr/bin/env python3
import argparse
import sys

def em1(names, n):
    echars = set([e for (ename, _) in names for e in ename])
    # print(echars)
    rchars = set([r for (_, rname) in names for r in rname])
    # print(rchars)
    initial_value = 1.0 / len(echars)
    t = {r: {e: initial_value for e in echars} for (_, rname) in names for r in rname}
    for i in range(n):
        count = {r: {e: 0 for e in echars} for r in rchars}
        total = {r: 0 for r in rchars}
        for (ename, rname) in names:
            s_total = {e: 0 for e in ename}
            for e in ename:
                for r in rname:
                    s_total[e] += t[r][e]
            # collect counts
            for e in ename:
                for r in rname:
                    count[r][e] += t[r][e] / s_total[e]
                    total[r] += t[r][e] / s_total[e]
        # estimate probabilities
        t = {r: {e: float(count[r][e]) / total[r] for e in echars} for r in rchars}
    t[' '] = {e: 0.0 if e != ' ' else 1.0 for e in list(echars) + [' ']}
    return t
    # return {r: sorted(t[r].items(), key=lambda x: -x[1]) for r in t}

def align(t, names, threshold):
    alignments = []
    for (e, r) in names:
        a = []
        for (i, r_i) in enumerate(r):
            for (j, e_j) in enumerate(e):
                if t[r_i][e_j] >= threshold:
                    a.append((i, j))
                    # sys.stdout.write("%i-%i " % (i,j))
        # sys.stdout.write('\n')
        alignments.append(a)
    return alignments

def main():
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('-a', '--threshold', dest='threshold', type=float, default=0.09)
    parser.add_argument('-n', '--num-loops', dest='n', type=int, default=1)
    parser.add_argument('-s', '--test', dest='s', default='data/test.ru')
    parser.add_argument('-t', '--train', dest='t', default='data/train.txt')
    parser.add_argument('-o', '--translation-options', dest='translation-options', default=1, type=int)
    args = parser.parse_args()
    train_names = [l.strip().replace(' ', '').split('\t') for l in open(args.t)]
    model = em1(train_names, args.n)
    # model2 = em2(model1, train_names, args.n)
    alignments = align(model, train_names, args.threshold)
    print('\n'.join([' '.join(['%d-%d' % (b[0], b[1]) for b in a]) for a in alignments]))
    # print(phrase_extraction(alignment[0], train_names[0][0], train_names[0][1]))

if __name__ == '__main__':
    main()
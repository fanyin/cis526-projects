#!/usr/bin/env python
from __future__ import print_function
import optparse
import sys

# Algorithm taken from http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#Python
def levenshtein(s1, s2):
    if len(s1) < len(s2):
        return levenshtein(s2, s1)
    if len(s2) == 0:
        return len(s1)
    previous_row = xrange(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer
            deletions = current_row[j] + 1       # than s2
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row
    return previous_row[-1]

def main():
    optparser = optparse.OptionParser()
    optparser.add_option("-r", "--reference", dest="reference", default="data/test.en", help="English reference names")
    (opts,_) = optparser.parse_args()
    names = [line.strip() for line in sys.stdin]
    reference = [line.strip() for line in open(opts.reference)]
    if len(names) < len(reference):
        print('Invalid input: not enough transliterated names')
        sys.exit(0)
    scores = [abs(levenshtein(w, r)) for (w,r) in zip(names, reference)]
    # print(scores, file=sys.stderr)
    # print(float(sum(scores)) / len(scores))
    print(sum(scores))

if __name__ == '__main__':
    main()
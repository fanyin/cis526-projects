#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
import glob # for file opening
import json
import operator
import math

'''
Default system
Default: Your output is printed out, one language per line.
This system just looks at whether a word is in the wiki.language or text.language. 
If so, add 1. The language with the highest number of points is printed out.
How to run: default | grade
'''

optparser = optparse.OptionParser()
optparser.add_option("-t", "--test", dest="test", default="test.small", help="Test set (default=test.small)")
(opts, _) = optparser.parse_args()

languages = defaultdict(float)

# Makes a dictionary of all the words for each wiki article
# Format [{english : ['a', 'the', 'cake']}]
multidict = {}

for filename in glob.glob('data/*.*'):
  with open(filename) as f:
    lang = filename[10:]
    multidict[lang] = {}

    counts = defaultdict(int)

    for line in f:
      words = line.split()
      for word in words:
        new_word = " " + word + " "
        for i in xrange(len(new_word) - 2):
          counts[new_word[i:i+3]] += 1

    sorted_trigrams = sorted(counts.iteritems(), key = operator.itemgetter(1))

    total = 0.0
    for trigram in sorted_trigrams[-3000:]:
        total += counts[trigram[0]]
    for trigram in sorted_trigrams[-3000:]:
        multidict[lang][trigram[0]] = math.log(counts[trigram[0]] / total)
    
    sys.stderr.write("Put the words in the file " + filename + " in dict\n")

min_prob = -1000000

# Counts whether each word appears in each dictionary
for i, line in enumerate(open("data/test/" + opts.test)):
  if len(line)>1: # ignore newlines
    words = line.split()
    # Checks if each word is in the wiki or text article or not
    for word in words:
      new_word = " " + word + " "
      for i in xrange(len(new_word) - 2):
        trigram = new_word[i:i+3]
        for lang in multidict:
          if trigram in multidict[lang]:
            languages[lang] += multidict[lang][trigram]
          else:
            languages[lang] += min_prob
    first = str(sorted(languages.iteritems(), key=operator.itemgetter(1))[-1][0])
    second = str(sorted(languages.iteritems(), key=operator.itemgetter(1))[-2][0])
    print first + "\n" + str(languages[first])
    print second + "\n" + str(languages[second])
    if languages[first] == languages[second] : 
        print "WTFFFFFFFFFF"
    print "--------"
  # Resets language dict for next sentence
  for lang in languages:
    languages[lang] = 0
